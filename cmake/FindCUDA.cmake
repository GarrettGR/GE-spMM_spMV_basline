if(TARGET CUDA::CUDA)
  return()
endif()
if(DEFINED CUDA_CONFIG_INCLUDED)
  return()
endif()
set(CUDA_CONFIG_INCLUDED TRUE)

include(CheckLanguage)
check_language(CUDA)
if(CMAKE_CUDA_COMPILER)
  enable_language(CUDA)
  find_package(CUDAToolkit QUIET)
  if(CUDAToolkit_FOUND)
    message(STATUS "Found CUDA: ${CUDAToolkit_VERSION}")
    if(NOT TARGET CUDA::CUDA)
      add_library(CUDA::CUDA INTERFACE IMPORTED)
      set_target_properties(CUDA::CUDA PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES "${CUDAToolkit_INCLUDE_DIRS}"
        INTERFACE_LINK_LIBRARIES "CUDA::cudart")
    endif()
    if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES)
      set(CMAKE_CUDA_ARCHITECTURES 80 CACHE STRING "CUDA architecture")
    endif()
    set(CUDA_FOUND TRUE)
  else()
    message(STATUS "CUDA Toolkit not found - GPU implementations will be disabled")
    set(CUDA_FOUND FALSE)
  endif()
else()
  message(STATUS "CUDA Compiler not found - GPU implementations will be disabled")
  set(CUDA_FOUND FALSE)
endif()

function(cuda_add_sources target)
  if(CUDA_FOUND)
    foreach(source ${ARGN})
      set_source_files_properties(${source} PROPERTIES LANGUAGE CUDA)
    endforeach()
    target_sources(${target} PRIVATE ${ARGN})
  endif()
endfunction()
